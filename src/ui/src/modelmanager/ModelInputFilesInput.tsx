import * as React from 'react';
import styled from 'styled-components';
import { RightOutlined } from '@ant-design/icons';
import { AutoComplete as Typeahead } from 'antd';
// eslint-disable-next-line no-restricted-imports
import { Input, Tooltip } from 'antd';
import { colors } from '../styled';
import { themeHelper } from '../styled/themeUtils';
import Link from '../components/Link/Link';
import ExternalLink from '../icons/ExternalLink';

const FilePathIndicator = styled.span`
  padding: 8px;
  background-color: ${colors.greyishBrown};
  color: #FFE292;
  border-radius: ${themeHelper('borderRadius.left')};
`;

const PopupContent  = styled.div`
  padding: 4px 0px;
`;

const RepoLinkFormat = styled.div`
    margin-top: 10px;
    margin-bottom: 10px;
    font-size: 14px;
`

const InputStyle = {
  width: '70%',
  boraderRadius: '0px 4px 4px 9px'
}

const validExtensions = ['.py', '.R', '.r'];
function isValidModelFile(filename: string): boolean {
  return validExtensions.reduce((rv: boolean, extension: string) => rv || filename.endsWith(extension), false);
}

const getRepoName = (repositoryUri: string | undefined) => {
  if (repositoryUri) {
    const repoUriArray = repositoryUri.split('/');
    return `${repoUriArray[repoUriArray.length - 2]}/${repoUriArray[repoUriArray.length - 1]}`;
  }
  return null;
};

export interface DefaultProps {
  selectedProjectsFiles?: string[];
}

export interface Props extends DefaultProps {
  defaultSelectedFiles: string[];
  fileFieldName: string;
  typeAheadDisabled?: boolean;
  gitEnabledProject?: boolean;
  repositoryUri?: string;
}

export interface State {
  selectedProjectsFiles: string[];
  selectedFile?: string;
}

class ModelInputFilesInput extends React.PureComponent<Props, State> {

  static defaultProps: DefaultProps = {
    selectedProjectsFiles: [],
  };

  constructor(props: Props) {
    super(props);
    this.state = {
      selectedProjectsFiles: props.selectedProjectsFiles!,
      selectedFile: props.defaultSelectedFiles[0],
    };
  }

  componentDidMount() {
    this.setState({
      selectedProjectsFiles: this.props.selectedProjectsFiles!,
    });
  }

  componentDidUpdate(prevProps: Props) {
    let newState = this.state;
    if (prevProps.selectedProjectsFiles !== this.props.selectedProjectsFiles) {
      newState = {
        ...newState,
        selectedProjectsFiles: this.props.selectedProjectsFiles!,
      };
    }

    this.setState(newState);
  }

  updateSelectedValue = (fileName: string) => {
    if (fileName) {
      this.setState({ selectedFile: fileName });
    } else {
      this.setState({ selectedFile: undefined });
    }
  }

  render() {
    const {
      fileFieldName,
      typeAheadDisabled,
      gitEnabledProject,
      repositoryUri
    } = this.props;
    const {
      selectedProjectsFiles,
      selectedFile,
    } = this.state;

    // Conditionally rendered typeahead based on flag
    return (
      <div>
        {!typeAheadDisabled && !gitEnabledProject ? (
          <>
            <Typeahead
              defaultValue={selectedFile}
              onChange={this.updateSelectedValue}
              id="fileSelectInput"
              placeholder="ex. model.py"
              dataSource={selectedProjectsFiles.filter(isValidModelFile).sort((a,b)=>{
                // Prioritizes model.py and model.R as the input example suggests
                // 'model.*' as the input file name
                if (a.split('.')[0] === "model") {
                  return -1
                } else if (b.split('.')[0] === "model") {
                  return 1
                }

                return a > b ? 1 : -1
              })}
              filterOption={true}
              data-test="file-select-input"
            >
              <Input/>
            </Typeahead>
            <input data-test="file-field-input" id="fileFieldInput" type="hidden" name={fileFieldName} value={selectedFile} />
          </>
        )  : (
          <span>
            <Tooltip
              title={() => (
                <>
                  <div>This is your working directory.</div>
                  <PopupContent>
                    * To persist files generated by your script, save any such files to /mnt/artifacts.
                  </PopupContent>
                </>
              )}
              placement={'bottomLeft'}
            >
              <FilePathIndicator>/mnt/code<RightOutlined /></FilePathIndicator>
            </Tooltip>
            <Input
              id="fileFieldInput"
              name={fileFieldName}
              placeholder="ex. model.py"
              style={InputStyle}
            />
            <RepoLinkFormat>
              Browse your code at <Link
              href={repositoryUri}
              type="icon-link-end"
              icon={<ExternalLink/>}
              openInNewTab={true}
              >
              {getRepoName(repositoryUri)}
              </Link>
            </RepoLinkFormat>
          </span>
        )
      }
      </div>
    );
  }

}

export default ModelInputFilesInput;
